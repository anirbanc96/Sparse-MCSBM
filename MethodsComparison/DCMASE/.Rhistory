source("C:/Users/anirbanc/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/MultiGraphs/Body.R", echo=TRUE)
source("C:/Users/anirbanc/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/MultiGraphs/Body.R", echo=TRUE)
source("C:/Users/anirbanc/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/MultiGraphs/Functions.R", echo=TRUE)
warnings()
source("C:/Users/anirbanc/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/MultiGraphs/Body.R", echo=TRUE)
power.overlap.tibble
source("C:/Users/anirbanc/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/MultiGraphs/Body.R", echo=TRUE)
power.overlap.tibble
source("C:/Users/anirbanc/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/MultiGraphs/Body.R", echo=TRUE)
source("C:/Users/anirbanc/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/MultiGraphs/Body.R", echo=TRUE)
source("C:/Users/anirbanc/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/MultiGraphs/Body.R", echo=TRUE)
source("C:/Users/anirbanc/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/MultiGraphs/Body.R", echo=TRUE)
power.overlap.tibble
source("C:/Users/anirbanc/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/MultiGraphs/Body.R", echo=TRUE)
gc()
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/amp.R", echo=TRUE)
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/amp.R", echo=TRUE)
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/amp.R", echo=TRUE)
estimate
sign(estimate)
generate.Adjacency.mat <- function(n, a, b, sigma){
#----------------------------------------------------------------------------#
# INPUT:
# n       <- number of nodes
# a       <- probability of intra community edge
# b       <- probability of inter community edge
# sigma   <- community assignment vector
#----------------------------------------------------------------------------#
# OUTPUT:
# A       <- Adjacency matrix of the two community SBM
#----------------------------------------------------------------------------#
A <- matrix(0, nrow = n, ncol = n)
for (i in 1:(n-1)){
for (j in (i+1):n){
prob <- (1/n)*(a*(sigma[i] == sigma[j]) + b*(sigma[i]!=sigma[j]))
A[i,j] <- rbinom(1, 1, prob)
}
}
A <- A + t(A)
return (A)
}
generate.Adjacency.list <- function(n, m, a.vec, b.vec, sigma){
#----------------------------------------------------------------------------#
# INPUT:
# n              <- number of nodes
# m              <- number of graphs/networks
# a.vec          <- vector of intra community probability for m networks
# b.vec          <- vector of inter community probability for m networks
# sigma          <- community assignment vector
#----------------------------------------------------------------------------#
# OUTPUT:
# Adjacency.list <- List containing m adjacency matrices.
#----------------------------------------------------------------------------#
Adjacency.list <- lapply(1:m,
function(x){generate.Adjacency.mat(n, a.vec[x],
b.vec[x], sigma)})
return (Adjacency.list)
}
n <- 400
p <- 500
m <- 3
avg.deg.vec <- sample(2:5, m, replace = T)
threshold.vec <- c(0, 0.25, 0.5, 0.75, 1, 1.5, 2, 2.5, 3, 4)
i <- 4
lambda.vec <- rep(sqrt(threshold.vec[i]/(m + 2)), m)
d.vec <- avg.deg.vec
b.vec <- d.vec - lambda.vec * sqrt(d.vec)
a.vec <- d.vec + lambda.vec * sqrt(d.vec)
sigma <- 2*rbinom(n, 1, 0.5)-1
Adjacency.list <- generate.Adjacency.list(n, m, a.vec, b.vec, sigma)
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/DCMASE/comdet-dcmase.R", echo=TRUE)
comdet_dcmase(Adjacency.list, K = 2, par = T, numpar = 7)
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/DCMASE/dcmase.R", echo=TRUE)
comdet_dcmase(Adjacency.list, K = 2, par = T, numpar = 7)
setwd("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/DCMASE")
source(c("comdet-dcmase.R", "comdetmethods.R", "dcmase.R", "getElbows.R",
"make_dcsbm_plots.R", "run_graph_tool.R", "SpectralMethods.R"))
setwd("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison")
file.sources = list.files("~/DCMASE",
pattern="*.R$", full.names=TRUE,
ignore.case=TRUE)
sapply(file.sources,source,.GlobalEnv)
file.sources = list.files("~/DCMASE",
pattern="*.R$", full.names=TRUE,
ignore.case=TRUE)
file.sources = list.files("~/DCMASE",
pattern="*.R$", full.names=TRUE,
ignore.case=TRUE)
file.sources
file.sources = list.files("~\DCMASE",
source("comdet-dcmase.R")
source("comdetmethods.R")
source("dcmase.R")
source("getElbows.R")
source("make_dcsbm_plots.R")
source("run_graph_tool.R")
source("SpectralMethods.R")
setwd("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/DCMASE")
source("comdet-dcmase.R")
source("comdetmethods.R")
source("dcmase.R")
source("getElbows.R")
source("make_dcsbm_plots.R")
source("run_graph_tool.R")
source("SpectralMethods.R")
comdet_dcmase(Adjacency.list, K = 2, par = T, numpar = 7)
comdet_dcmase(Adjacency.list, K = 2)
z <- comdet_dcmase(Adjacency.list, K = 2)
z$community_memberships
community.labels <- comdet_dcmase(Adjacency.list, K = 2)$community_memberships
community.labels <- ifelse(community.labels == 2, -1, community.labels)
sigma.hat <- ifelse(community.labels == 2, -1, community.labels)
overlap <- max(abs(sum(sigma.hat * sigma)), abs(sum(-sigma.hat * sigma)))/n
i <- 10
lambda.vec <- rep(sqrt(threshold.vec[i]/(m + 2)), m)
b.vec <- d.vec - lambda.vec * sqrt(d.vec)
a.vec <- d.vec + lambda.vec * sqrt(d.vec)
Adjacency.list <- generate.Adjacency.list(n, m, a.vec, b.vec, sigma)
community.labels <- comdet_dcmase(Adjacency.list, K = 2)$community_memberships
sigma.hat <- ifelse(community.labels == 2, -1, community.labels)
overlap <- max(abs(sum(sigma.hat * sigma)), abs(sum(-sigma.hat * sigma)))/n
lambda.vec <- c(1.5, 1.5, 1.5)
b.vec <- d.vec - lambda.vec * sqrt(d.vec)
a.vec <- d.vec + lambda.vec * sqrt(d.vec)
Adjacency.list <- generate.Adjacency.list(n, m, a.vec, b.vec, sigma)
warnings()
d.vec <- c(5,5,5)
b.vec <- d.vec - lambda.vec * sqrt(d.vec)
a.vec <- d.vec + lambda.vec * sqrt(d.vec)
Adjacency.list <- generate.Adjacency.list(n, m, a.vec, b.vec, sigma)
community.labels <- comdet_dcmase(Adjacency.list, K = 2)$community_memberships
sigma.hat <- ifelse(community.labels == 2, -1, community.labels)
overlap <- max(abs(sum(sigma.hat * sigma)), abs(sum(-sigma.hat * sigma)))/n
lambda.vec <- c(1.5, 0.8, 0.8)
b.vec <- d.vec - lambda.vec * sqrt(d.vec)
a.vec <- d.vec + lambda.vec * sqrt(d.vec)
Adjacency.list <- generate.Adjacency.list(n, m, a.vec, b.vec, sigma)
community.labels <- comdet_dcmase(Adjacency.list, K = 2)$community_memberships
sigma.hat <- ifelse(community.labels == 2, -1, community.labels)
overlap <- max(abs(sum(sigma.hat * sigma)), abs(sum(-sigma.hat * sigma)))/n
lambda.vec <- c(0.95, 0.95, 95)
lambda.vec <- c(0.95, 0.95, 0.95)
b.vec <- d.vec - lambda.vec * sqrt(d.vec)
a.vec <- d.vec + lambda.vec * sqrt(d.vec)
Adjacency.list <- generate.Adjacency.list(n, m, a.vec, b.vec, sigma)
community.labels <- comdet_dcmase(Adjacency.list, K = 2)$community_memberships
sigma.hat <- ifelse(community.labels == 2, -1, community.labels)
overlap <- max(abs(sum(sigma.hat * sigma)), abs(sum(-sigma.hat * sigma)))/n
comdet_dcmase(Adjacency.list[[1]], K = 2)
threshold.vec <- c(0, 0.5, 1, 2, 4, 8, 12, 16, 20)
for (i in 1:length(threshold.vec)){
(lambda.vec <- rep(sqrt(threshold.vec[i]/(m + 2)), m))
}
for (i in 1:length(threshold.vec)){
lambda.vec <- rep(sqrt(threshold.vec[i]/(m + 2)), m)
print (lambda.vec)
}
threshold.vec <- c(0, 0.5, 1, 2, 4)
for (i in 1:length(threshold.vec)){
lambda1 <- sqrt(2 * m * threshold.vec[i]/((m + 2) * (m + 1)))
lambda.vec <- c(lambda1,
rep(sqrt(m * threshold.vec[i]/((m + 2) * (m + 1))), m-1))
mu <- sqrt(2) * sqrt(gamma) * sqrt(threshold.vec[i]/(m + 2))
print(sum(lambda.vec^2) + (mu^2)/gamma)
}
gamma <- 4/5
for (i in 1:length(threshold.vec)){
lambda1 <- sqrt(2 * m * threshold.vec[i]/((m + 2) * (m + 1)))
lambda.vec <- c(lambda1,
rep(sqrt(m * threshold.vec[i]/((m + 2) * (m + 1))), m-1))
mu <- sqrt(2) * sqrt(gamma) * sqrt(threshold.vec[i]/(m + 2))
print(sum(lambda.vec^2) + (mu^2)/gamma)
}
for (i in 1:length(threshold.vec)){
lambda1 <- sqrt(2 * m * threshold.vec[i]/((m + 2) * (m + 1)))
lambda.vec <- c(lambda1,
rep(sqrt(m * threshold.vec[i]/((m + 2) * (m + 1))), m-1))
print (lambda.vec)
mu <- sqrt(2) * sqrt(gamma) * sqrt(threshold.vec[i]/(m + 2))
print(sum(lambda.vec^2) + (mu^2)/gamma)
}
threshold.vec <- c(0, 0.5, 1, 2, 4, 8)
for (i in 1:length(threshold.vec)){
lambda1 <- sqrt(2 * m * threshold.vec[i]/((m + 2) * (m + 1)))
lambda.vec <- c(lambda1,
rep(sqrt(m * threshold.vec[i]/((m + 2) * (m + 1))), m-1))
print (lambda.vec)
mu <- sqrt(2) * sqrt(gamma) * sqrt(threshold.vec[i]/(m + 2))
print(sum(lambda.vec^2) + (mu^2)/gamma)
}
threshold.vec <- seq(0, 6, 0.8)
threshold.vec <- seq(0, 6, 0.5)
threshold.vec <- seq(0, 6, 0.6)
threshold.vec
for (i in 1:length(threshold.vec)){
lambda1 <- sqrt(2 * m * threshold.vec[i]/((m + 2) * (m + 1)))
lambda.vec <- c(lambda1,
rep(sqrt(m * threshold.vec[i]/((m + 2) * (m + 1))), m-1))
print (lambda.vec)
mu <- sqrt(2) * sqrt(gamma) * sqrt(threshold.vec[i]/(m + 2))
print(sum(lambda.vec^2) + (mu^2)/gamma)
}
setwd("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/DCMASE")
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/DCMASE/Overlap.R", echo=TRUE)
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/DCMASE/Overlap.R", echo=TRUE)
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/DCMASE/Overlap.R", echo=TRUE)
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/DCMASE/Overlap.R", echo=TRUE)
warnings()
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/DCMASE/Overlap.R", echo=TRUE)
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/Methods Comparison/DCMASE/Overlap.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
