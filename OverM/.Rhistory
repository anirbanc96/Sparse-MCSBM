1+1
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("knitr")
install.packages("kableExtra")
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex:::install_yihui_pkgs()
tinytex::uninstall_tinytex()
library(tinytex)
tinytex::install_tinytex()
install.packages("DoseFinding")
require(DoseFinding)
data("IBScovars")
View(IBScovars)
sum(IBScovars$gender == 1)
sum(IBScovars$gender == 2)
remove.packages("IBScovars")
remove.packages("DoseFinding")
library(keras)
install.packages(c("evaluate", "foreign", "htmltools", "KernSmooth", "knitr", "lattice", "lifecycle", "Matrix", "MatrixModels", "mgcv", "nlme", "rlang", "rpart", "rprojroot", "spatial", "survival", "withr", "xfun"))
library(reticulate)
remove.packages("reticulate")
library(keras)
remove.packages("keras")
6+6+3+4+6
6+6+6+6+4
2+6+3+1+2
6+2+5+3+4
6+6+2+6+6
1+6+3+3+2
6+3+1+5+4
6+3+6+4+5
6+6+6+6+4
6+6+6+6+3
source("~/Dropbox (Penn)/Graphon Testing/Multivariate/Simulations/Codes/Functions.R", echo=TRUE)
source("~/Dropbox (Penn)/Graphon Testing/Multivariate/Simulations/Codes/Graphons.R", echo=TRUE)
Gen.Rand.Graph(10, irreg.W2)
Gen.Rand.Graph(10, irreg.W2)
is.Symmetric(Gen.Rand.Graph(10, irreg.W2))
Is.Symmetric(Gen.Rand.Graph(10, irreg.W2))
?is.Symmetric
isSymmetric(Gen.Rand.Graph(10, irreg.W2))
0.99^2000
?rbinom
x = rbinom(1000, 1, 0.5)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?rt
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
plot(rnorm(1.5, 0.25))
plot(density(rnorm(1.5, 0.25)))
plot(density(rnorm(n, 1.5, 0.25)))
plot(density(2 * rnorm(n, 1.5, 0.25)))
plot(density(2 * rnorm(n, 3, 1)))
plot(density(2 * rnorm(n, 1.5, 0.25)))
plot(density(2 * rnorm(n, 3, 1)))
n = 10000
x = rbinom(n, 1, 0.5)
y = rbinom(n, 1, 0.5)
U = x * rnorm(n, 1.5, 0.5) + (1-x) * rnorm(n, 0.5, 0.5)
V = y * rnorm(n, -1.5, 0.5) + (1-y) * rnorm(n, -0.5, 0.5)
Z.1 = rbinom(n, 1, 0.5)
Z =  Z.1 *2* U + (1-Z.1) *2* V
plot(density(Z))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
data <- data(iris)
View(iris)
data(iris)
source("~/.active-rstudio-document", echo=TRUE)
library(tidyverse)
iris <- as_tibble(iris)
summary(iris)
iris %>%
mutate(newvar = Sepal.Length * Sepal.Width)
iris <- iris %>%
mutate(newvar = Sepal.Length * Sepal.Width)
View(iris)
iris_lm <- iris %>%
lm(Sepal.Length ~ Sepal.Width + Petal.Length)
iris_lm <- lm(Sepal.Length ~ Sepal.Width + Petal.Length, data = iris)
iris_lm
iris_lm$model
summary(iris_lm)
iris_lm1 <- lm(Sepal.Length ~ Petal.Length, data = iris)
anova(iris_lm, iris_lm1)
anova(iris_lm1, iris_lm)
cars::vif(iris_lm)
install.packages("cars")
car::vif(iris_lm)
s = summary(iris_lm)
s$fstatistic
plot(iris_lm)
cooks.distance(lm_fit)
cooks.distance(iris_lm)
source("~/.active-rstudio-document", echo=TRUE)
hist(x1)
plot(edf(x1))
plot(ecdf(x1))
point(ecdf(x2))
points(ecdf(x2))
plot(ecdf(x2))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/OverM")
Power.Overlap.values <- as_tibble(read_csv("Vals.csv"))[,2:11]
library(tidyverse)
Power.Overlap.values <- as_tibble(read_csv("Vals.csv"))[,2:11]
Power.Overlap.values <- as_tibble(read_csv("Vals.csv"))
View(Power.Overlap.values)
m <- c(1, 3, 5, 7, 10)
threshold.vec <- Power.Overlap.values[1,]
Power <- as.data.frame(t(rbind(threshold.vec, Power.Overlap.values[2:6,])))
Power <- as.data.frame(t(rbind(threshold.vec, Power.Overlap.values[2:5,])))
Overlap <- as.data.frame(t(rbind(threshold.vec, Power.Overlap.values[6:10,])))
View(Power)
View(Overlap)
Power <- as.data.frame(t(rbind(threshold.vec, Power.Overlap.values[2:6,])))
Overlap <- as.data.frame(t(rbind(threshold.vec, Power.Overlap.values[7:11,])))
View(Power)
colnames(Power) <- c("threshold", "m1", "m2",
"m3", "m4", "m5")
colnames(Overlap) <- c("threshold", "m1", "m2",
"m3", "m4", "m5")
Power %>%
ggplot(aes(x = threshold, y = m1)) +
geom_line(aes(y = m1, color = "m1"), linetype = "dashed") +
geom_point(aes(y = m1, color = "m1")) +
geom_line(aes(y = m2, color = "m2"), linetype = "dashed") +
geom_point(aes(y = m2, color = "m2")) +
geom_line(aes(y = m3, color = "m3"), linetype = "dashed") +
geom_point(aes(y = m3, color = "m3")) +
geom_line(aes(y = m4, color = "m4"), linetype = "dashed") +
geom_point(aes(y = m4, color = "m4")) +
geom_line(aes(y = m5, color = "m5"), linetype = "dashed") +
geom_point(aes(y = m5, color = "m5")) +
scale_color_manual(breaks = c("m1", "m2",
"m3", "m4", "m5"),
values = c("cornflowerblue", "darkred", "deeppink",
"forestgreen","chocolate1"),
labels = m) +
labs(title = "Power of Belief Propagation", x = "Threshold",
y = "Power", color = "Number of Networks") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = c(0.85,0.5),
legend.text.align = 0,
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
