1+1
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("knitr")
install.packages("kableExtra")
install.packages("tinytex")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex:::install_yihui_pkgs()
tinytex::uninstall_tinytex()
library(tinytex)
tinytex::install_tinytex()
install.packages("DoseFinding")
require(DoseFinding)
data("IBScovars")
View(IBScovars)
sum(IBScovars$gender == 1)
sum(IBScovars$gender == 2)
remove.packages("IBScovars")
remove.packages("DoseFinding")
library(keras)
install.packages(c("evaluate", "foreign", "htmltools", "KernSmooth", "knitr", "lattice", "lifecycle", "Matrix", "MatrixModels", "mgcv", "nlme", "rlang", "rpart", "rprojroot", "spatial", "survival", "withr", "xfun"))
library(reticulate)
remove.packages("reticulate")
library(keras)
remove.packages("keras")
6+6+3+4+6
6+6+6+6+4
2+6+3+1+2
6+2+5+3+4
6+6+2+6+6
1+6+3+3+2
6+3+1+5+4
6+3+6+4+5
6+6+6+6+4
6+6+6+6+3
source("~/Dropbox (Penn)/Graphon Testing/Multivariate/Simulations/Codes/Functions.R", echo=TRUE)
source("~/Dropbox (Penn)/Graphon Testing/Multivariate/Simulations/Codes/Graphons.R", echo=TRUE)
Gen.Rand.Graph(10, irreg.W2)
Gen.Rand.Graph(10, irreg.W2)
is.Symmetric(Gen.Rand.Graph(10, irreg.W2))
Is.Symmetric(Gen.Rand.Graph(10, irreg.W2))
?is.Symmetric
isSymmetric(Gen.Rand.Graph(10, irreg.W2))
0.99^2000
?rbinom
x = rbinom(1000, 1, 0.5)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?rt
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
plot(rnorm(1.5, 0.25))
plot(density(rnorm(1.5, 0.25)))
plot(density(rnorm(n, 1.5, 0.25)))
plot(density(2 * rnorm(n, 1.5, 0.25)))
plot(density(2 * rnorm(n, 3, 1)))
plot(density(2 * rnorm(n, 1.5, 0.25)))
plot(density(2 * rnorm(n, 3, 1)))
n = 10000
x = rbinom(n, 1, 0.5)
y = rbinom(n, 1, 0.5)
U = x * rnorm(n, 1.5, 0.5) + (1-x) * rnorm(n, 0.5, 0.5)
V = y * rnorm(n, -1.5, 0.5) + (1-y) * rnorm(n, -0.5, 0.5)
Z.1 = rbinom(n, 1, 0.5)
Z =  Z.1 *2* U + (1-Z.1) *2* V
plot(density(Z))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
source("~/Dropbox (Penn)/Graph Based Calibration Test/code/Simulation_based_inference/ColabFiles/Results/DensityPlots.R", echo=TRUE)
data <- data(iris)
View(iris)
data(iris)
source("~/.active-rstudio-document", echo=TRUE)
library(tidyverse)
iris <- as_tibble(iris)
summary(iris)
iris %>%
mutate(newvar = Sepal.Length * Sepal.Width)
iris <- iris %>%
mutate(newvar = Sepal.Length * Sepal.Width)
View(iris)
iris_lm <- iris %>%
lm(Sepal.Length ~ Sepal.Width + Petal.Length)
iris_lm <- lm(Sepal.Length ~ Sepal.Width + Petal.Length, data = iris)
iris_lm
iris_lm$model
summary(iris_lm)
iris_lm1 <- lm(Sepal.Length ~ Petal.Length, data = iris)
anova(iris_lm, iris_lm1)
anova(iris_lm1, iris_lm)
cars::vif(iris_lm)
install.packages("cars")
car::vif(iris_lm)
s = summary(iris_lm)
s$fstatistic
plot(iris_lm)
cooks.distance(lm_fit)
cooks.distance(iris_lm)
source("~/.active-rstudio-document", echo=TRUE)
hist(x1)
plot(edf(x1))
plot(ecdf(x1))
point(ecdf(x2))
points(ecdf(x2))
plot(ecdf(x2))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/OverM")
source("Functions.R")
set.seed(2024)
threshold.vec <- c(0, 0.25, 0.5, 0.75, 1, 1.5, 2, 2.5, 3, 4)
n <- 800
p <- 1000
sigma <- 2*rbinom(n, 1, 0.5)-1
gamma <- 4/5
n.resamp <- 7
m.vec <- c(1)
power <- matrix(0, length(m.vec), length(threshold.vec))
overlap <- matrix(0, length(m.vec), length(threshold.vec))
################################################################################
# Parallelising in Mac/Windows
library(foreach)
library(doParallel)
cores=detectCores()
cl <- makeCluster(cores[1]-1)
registerDoParallel(cl)
################################################################################
# Parallelising in cluster
# library(foreach)
# library(doParallel)
# library(snow)
#
# cores <- strtoi(Sys.getenv("NSLOTS"))
# cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#
# registerDoParallel(cl)
################################################################################
start <- Sys.time()
for (k in 1:length(m.vec)){
m <- m.vec[k]
avg.deg.vec <- sample(2:5, m, replace = T)
for (i in 1:length(threshold.vec)){
lambda.vec <- rep(sqrt(threshold.vec[i]/(m + 2)), m)
mu <- sqrt(2) * sqrt(gamma) * sqrt(threshold.vec[i]/(m + 2))
print(sum(lambda.vec^2) + (mu^2)/gamma)
writeLines(c("Starting choice ", i,"\n"), "log.txt")
outputMatrix <- foreach(j=1:n.resamp, .combine=rbind) %dopar% {
cat(paste("Starting iteration ", j, "\n"), file = "log.txt", append = T)
output <- power.comp(n, m, p, gamma, sigma, mu, lambda.vec, avg.deg.vec)
cat(paste("Finished iteration ", j, "\n"), file = "log.txt", append = T)
output
}
power[k,i] <- mean(outputMatrix[,1])
overlap[k,i] <- mean(outputMatrix[,2])
print (c(m.vec[k], threshold.vec[i], power[k,i], overlap[k,i]))
}
}
source("Functions.R")
set.seed(2024)
threshold.vec <- c(0, 0.25, 0.5, 0.75, 1, 1.5, 2, 2.5, 3, 4)
n <- 800
p <- 1000
sigma <- 2*rbinom(n, 1, 0.5)-1
gamma <- 4/5
n.resamp <- 7
m.vec <- c(1)
power <- matrix(0, length(m.vec), length(threshold.vec))
overlap <- matrix(0, length(m.vec), length(threshold.vec))
################################################################################
# Parallelising in Mac/Windows
library(foreach)
library(doParallel)
cores=detectCores()
cl <- makeCluster(cores[1]-1)
registerDoParallel(cl)
################################################################################
# Parallelising in cluster
# library(foreach)
# library(doParallel)
# library(snow)
#
# cores <- strtoi(Sys.getenv("NSLOTS"))
# cl <- makeCluster(cores, methods = FALSE, type = "MPI")
#
# registerDoParallel(cl)
################################################################################
start <- Sys.time()
for (k in 1:length(m.vec)){
m <- m.vec[k]
avg.deg.vec <- sample(2:5, m, replace = T)
for (i in 1:length(threshold.vec)){
lambda.vec <- rep(sqrt(threshold.vec[i]/(m + 2)), m)
mu <- sqrt(2) * sqrt(gamma) * sqrt(threshold.vec[i]/(m + 2))
print(sum(lambda.vec^2) + (mu^2)/gamma)
writeLines(c("Starting choice ", i,"\n"), "log.txt")
outputMatrix <- foreach(j=1:n.resamp, .combine=rbind) %dopar% {
cat(paste("Starting iteration ", j, "\n"), file = "log.txt", append = T)
output <- power.comp(n, m, p, gamma, sigma, mu, lambda.vec, avg.deg.vec)
cat(paste("Finished iteration ", j, "\n"), file = "log.txt", append = T)
output
}
power[k,i] <- mean(outputMatrix[,1])
overlap[k,i] <- mean(outputMatrix[,2])
print (c(m.vec[k], threshold.vec[i], power[k,i], overlap[k,i]))
}
}
setwd("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/OverM")
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/OverM/Plot.R", echo=TRUE)
setwd("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/OverRatio")
source("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/OverRatio/RatioPlot.R", echo=TRUE)
setwd("~/Dropbox (Penn)/Finite degree Multi-Layer SBM/IMA Revision Codes/OverCorr")
